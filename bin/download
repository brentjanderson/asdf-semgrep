#!/usr/bin/env bash
set -eu
[ "${BASH_VERSINFO[0]}" -ge 3 ] && set -o pipefail

get_file_suffix () {
    local suffix=""

    case $(uname | tr '[:upper:]' '[:lower:]') in
        linux*)
        local suffix=ubuntu-16.04.tgz
        ;;
        darwin*)
        local suffix=osx.zip
        ;;
        *)
            echo "Unknown platform $(uname) not supported"
            exit 1
        ;;
    esac

    echo -n $suffix
}

check_shasum() {
    local archive_file_name=$1
    local authentic_checksum_file=$2
    local authentic_checksum=""

    authentic_checksum=`cat $authentic_checksum_file | cut -b '-64'`

    if command -v sha256sum >/dev/null 2>&1; then
        sha256sum \
            -c <<<"$authentic_checksum $archive_file_name"
    elif command -v shasum >/dev/null 2>&1; then
        shasum \
        -a 256 \
        -c <<<"$authentic_checksum $archive_file_name"
    else
        echo "sha256sum or shasum is not available for use"
        exit 1
    fi
}

download_semgrep () {
    local version=$1
    local download_path=$2
    local platform=""
    local suffix=""

    suffix=$(get_file_suffix)

    curl -sL "https://github.com/returntocorp/semgrep/releases/download/v${version}/semgrep-v${version}-${suffix}" -o "${download_path}/archive"
    curl -sL "https://github.com/returntocorp/semgrep/releases/download/v${version}/semgrep-v${version}-${suffix}.sha256" -o "${download_path}/archive.sha256"
    
    echo 'verifying checksum'
    if ! check_shasum "${download_path}/archive" "${download_path}/archive.sha256"; then
        echo "Authenticity of package archive can not be assured. Exiting."
        exit 1
    else
      echo "checksum verified"
      exit 0
    fi
}

download_semgrep "$ASDF_INSTALL_VERSION" "$ASDF_DOWNLOAD_PATH"